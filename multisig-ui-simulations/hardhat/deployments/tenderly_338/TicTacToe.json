{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.17\"},\"sources\":{\"contracts/TicTacToe.sol\":{\"content\":\"pragma solidity ^0.8.7;\\n\\n//SPDX-License-Identifier: MIT\\n\\n// TicTacToe is a solidity implementation of the tic tac toe game.\\n// You can find the rules at https://en.wikipedia.org/wiki/Tic-tac-toe\\ncontract TicTacToe {\\n    // Players enumerates all possible players\\n    enum Players {\\n        None,\\n        PlayerOne,\\n        PlayerTwo\\n    }\\n    // Winners enumerates all possible winners\\n    enum Winners {\\n        None,\\n        PlayerOne,\\n        PlayerTwo,\\n        Draw\\n    }\\n\\n    // Game stores the state of a round of tic tac toe.\\n    // As long as `winner` is `None`, the game is not over.\\n    // `playerTurn` defines who may go next.\\n    // Player one must make the first move.\\n    // The `board` has the size 3x3 and in each cell, a player\\n    // can be listed. Initializes as `None` player, as that is the\\n    // first element in the enumeration.\\n    // That means that players are free to fill in any cell at the\\n    // start of the game.\\n    struct Game {\\n        address playerOne;\\n        address playerTwo;\\n        Winners winner;\\n        Players playerTurn;\\n        Players[3][3] board;\\n    }\\n\\n    // games stores all the games.\\n    // Games that are already over as well as games that are still running.\\n    // It is possible to iterate over all games, as the keys of the mapping\\n    // are known to be the integers from `1` to `nrOfGames`.\\n    mapping(uint256 => Game) public games;\\n    // nrOfGames stores the total number of games in this contract.\\n    uint256 public nrOfGames;\\n\\n    // GameCreated signals that `creator` created a new game with this `gameId`.\\n    event GameCreated(uint256 gameId, address creator);\\n    // PlayerJoinedGame signals that `player` joined the game with the id `gameId`.\\n    // That player has the player number `playerNumber` in that game.\\n    event PlayerJoinedGame(uint256 gameId, address player, uint8 playerNumber);\\n    // PlayerMadeMove signals that `player` filled in the board of the game with\\n    // the id `gameId`. She did so at the coordinates `boardRow`, `boardCol`.\\n    event PlayerMadeMove(\\n        uint256 gameId,\\n        address player,\\n        uint256 boardRow,\\n        uint256 boardCol\\n    );\\n    // GameOver signals that the game with the id `gameId` is over.\\n    // The winner is indicated by `winner`. No more moves are allowed in this game.\\n    event GameOver(uint256 gameId, Winners winner);\\n\\n    // newGame creates a new game and returns the new game's `gameId`.\\n    // The `gameId` is required in subsequent calls to identify the game.\\n    function newGame() public returns (uint256 gameId) {\\n        Game memory game;\\n        game.playerTurn = Players.PlayerOne;\\n\\n        nrOfGames += 1;\\n        games[nrOfGames] = game;\\n\\n        emit GameCreated(nrOfGames, msg.sender);\\n\\n        return nrOfGames;\\n    }\\n\\n    // joinGame lets the sender of the message join the game with the id `gameId`.\\n    // It returns `success = true` when joining the game was possible and\\n    // `false` otherwise.\\n    // `reason` indicates why a game was joined or not joined.\\n    function joinGame(uint256 _gameId) public {\\n        require(_gameId <= nrOfGames, \\\"No such game exists.\\\");\\n\\n        address player = msg.sender;\\n        Game storage game = games[_gameId];\\n\\n        require(\\n            game.playerOne == address(0) || game.playerTwo == address(0),\\n            \\\"Game already started.\\\"\\n        );\\n\\n        // Assign the new player to slot 1 if it is still available.\\n        if (game.playerOne == address(0)) {\\n            game.playerOne = player;\\n            emit PlayerJoinedGame(_gameId, player, uint8(Players.PlayerOne));\\n            return;\\n        }\\n\\n        // If slot 1 is taken, assign the new player to slot 2 if it is still available.\\n        if (game.playerTwo == address(0)) {\\n            game.playerTwo = player;\\n            emit PlayerJoinedGame(_gameId, player, uint8(Players.PlayerTwo));\\n            return;\\n        }\\n    }\\n\\n    // makeMove inserts a player on the game board.\\n    // The player is identified as the sender of the message.\\n    function makeMove(\\n        uint256 _gameId,\\n        uint256 _boardRow,\\n        uint256 _boardCol\\n    ) public {\\n        require(_gameId <= nrOfGames, \\\"No such game exists.\\\");\\n\\n        Game storage game = games[_gameId];\\n\\n        // Any winner other than `None` means that no more moves are allowed.\\n\\n        require(game.winner == Winners.None, \\\"The game has already ended.\\\");\\n\\n        // Only the player whose turn it is may make a move.\\n        require(msg.sender == getCurrentPlayer(game), \\\"It is not your turn.\\\");\\n\\n        // Players can only make moves in cells on the board that have not been played before.\\n        require(\\n            game.board[_boardRow][_boardCol] == Players.None,\\n            \\\"There is already a mark at the given coordinates.\\\"\\n        );\\n\\n        // Now the move is recorded and the according event emitted.\\n        game.board[_boardRow][_boardCol] = game.playerTurn;\\n        emit PlayerMadeMove(_gameId, msg.sender, _boardRow, _boardCol);\\n\\n        // Check if there is a winner now that we have a new move.\\n        Winners winner = calculateWinner(game.board);\\n        if (winner != Winners.None) {\\n            // If there is a winner (can be a `Draw`) it must be recorded in the game and\\n            // the corresponding event must be emitted.\\n            game.winner = winner;\\n            emit GameOver(_gameId, winner);\\n\\n            return;\\n        }\\n\\n        // A move was made and there is no winner yet.\\n        // The next player should make her move.\\n        nextPlayer(game);\\n    }\\n\\n    // getCurrentPlayer returns the address of the player that should make the next move.\\n    // Returns the `0x0` address if it is no player's turn.\\n    function getCurrentPlayer(Game storage _game)\\n        private\\n        view\\n        returns (address player)\\n    {\\n        if (_game.playerTurn == Players.PlayerOne) {\\n            return _game.playerOne;\\n        }\\n\\n        if (_game.playerTurn == Players.PlayerTwo) {\\n            return _game.playerTwo;\\n        }\\n\\n        return address(0);\\n    }\\n\\n    // calculateWinner returns the winner on the given board.\\n    // The returned winner can be `None` in which case there is no winner and no draw.\\n    function calculateWinner(Players[3][3] memory _board)\\n        private\\n        pure\\n        returns (Winners winner)\\n    {\\n        // First we check if there is a victory in a row.\\n        // If so, convert `Players` to `Winners`\\n        // Subsequently we do the same for columns and diagonals.\\n        Players player = winnerInRow(_board);\\n        if (player == Players.PlayerOne) {\\n            return Winners.PlayerOne;\\n        }\\n        if (player == Players.PlayerTwo) {\\n            return Winners.PlayerTwo;\\n        }\\n\\n        player = winnerInColumn(_board);\\n        if (player == Players.PlayerOne) {\\n            return Winners.PlayerOne;\\n        }\\n        if (player == Players.PlayerTwo) {\\n            return Winners.PlayerTwo;\\n        }\\n\\n        player = winnerInDiagonal(_board);\\n        if (player == Players.PlayerOne) {\\n            return Winners.PlayerOne;\\n        }\\n        if (player == Players.PlayerTwo) {\\n            return Winners.PlayerTwo;\\n        }\\n\\n        // If there is no winner and no more space on the board,\\n        // then it is a draw.\\n        if (isBoardFull(_board)) {\\n            return Winners.Draw;\\n        }\\n\\n        return Winners.None;\\n    }\\n\\n    // winnerInRow returns the player that wins in any row.\\n    // To win in a row, all cells in the row must belong to the same player\\n    // and that player must not be the `None` player.\\n    function winnerInRow(Players[3][3] memory _board)\\n        private\\n        pure\\n        returns (Players winner)\\n    {\\n        for (uint8 x = 0; x < 3; x++) {\\n            if (\\n                _board[x][0] == _board[x][1] &&\\n                _board[x][1] == _board[x][2] &&\\n                _board[x][0] != Players.None\\n            ) {\\n                return _board[x][0];\\n            }\\n        }\\n\\n        return Players.None;\\n    }\\n\\n    // winnerInColumn returns the player that wins in any column.\\n    // To win in a column, all cells in the column must belong to the same player\\n    // and that player must not be the `None` player.\\n    function winnerInColumn(Players[3][3] memory _board)\\n        private\\n        pure\\n        returns (Players winner)\\n    {\\n        for (uint8 y = 0; y < 3; y++) {\\n            if (\\n                _board[0][y] == _board[1][y] &&\\n                _board[1][y] == _board[2][y] &&\\n                _board[0][y] != Players.None\\n            ) {\\n                return _board[0][y];\\n            }\\n        }\\n\\n        return Players.None;\\n    }\\n\\n    // winnerInDiagoral returns the player that wins in any diagonal.\\n    // To win in a diagonal, all cells in the diaggonal must belong to the same player\\n    // and that player must not be the `None` player.\\n    function winnerInDiagonal(Players[3][3] memory _board)\\n        private\\n        pure\\n        returns (Players winner)\\n    {\\n        if (\\n            _board[0][0] == _board[1][1] &&\\n            _board[1][1] == _board[2][2] &&\\n            _board[0][0] != Players.None\\n        ) {\\n            return _board[0][0];\\n        }\\n\\n        if (\\n            _board[0][2] == _board[1][1] &&\\n            _board[1][1] == _board[2][0] &&\\n            _board[0][2] != Players.None\\n        ) {\\n            return _board[0][2];\\n        }\\n\\n        return Players.None;\\n    }\\n\\n    // isBoardFull returns true if all cells of the board belong to a player other\\n    // than `None`.\\n    function isBoardFull(Players[3][3] memory _board)\\n        private\\n        pure\\n        returns (bool isFull)\\n    {\\n        for (uint8 x = 0; x < 3; x++) {\\n            for (uint8 y = 0; y < 3; y++) {\\n                if (_board[x][y] == Players.None) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // nextPlayer changes whose turn it is for the given `_game`.\\n    function nextPlayer(Game storage _game) private {\\n        if (_game.playerTurn == Players.PlayerOne) {\\n            _game.playerTurn = Players.PlayerTwo;\\n        } else {\\n            _game.playerTurn = Players.PlayerOne;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.7\"}}}","address":"0x06f9B486F253edD005aDBe2426869F9Bf33F40F0","bytecode":"0x608060405234801561001057600080fd5b50611dfa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063117a5b901461005c5780637d03f5f31461008f578063caf2faaa146100ad578063cfc2f5ff146100cb578063efaa55a0146100e7575b600080fd5b610076600480360381019061007191906117dd565b610103565b604051610086949392919061190a565b60405180910390f35b61009761018d565b6040516100a4919061195e565b60405180910390f35b6100b5610343565b6040516100c2919061195e565b60405180910390f35b6100e560048036038101906100e09190611979565b610349565b005b61010160048036038101906100fc91906117dd565b61073d565b005b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060010160159054906101000a900460ff16905084565b600061019761158f565b6001816060019060028111156101b0576101af61184b565b5b908160028111156101c4576101c361184b565b5b8152505060018060008282546101da91906119fb565b9250508190555080600080600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360038111156102af576102ae61184b565b5b021790555060608201518160010160156101000a81548160ff021916908360028111156102df576102de61184b565b5b02179055506080820151816002019060036102fb929190611614565b509050507fc3e0f84839dc888c892a013d10c8f9d6dc05a21a879d0ce468ca558013e9121c60015433604051610332929190611a2f565b60405180910390a160015491505090565b60015481565b60015483111561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590611ab5565b60405180910390fd5b60008060008581526020019081526020016000209050600060038111156103b8576103b761184b565b5b8160010160149054906101000a900460ff1660038111156103dc576103db61184b565b5b1461041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611b21565b60405180910390fd5b61042581610a70565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048990611b8d565b60405180910390fd5b600060028111156104a6576104a561184b565b5b8160020184600381106104bc576104bb611bad565b5b0183600381106104cf576104ce611bad565b5b602091828204019190069054906101000a900460ff1660028111156104f7576104f661184b565b5b14610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90611c4e565b60405180910390fd5b8060010160159054906101000a900460ff1681600201846003811061055f5761055e611bad565b5b01836003811061057257610571611bad565b5b602091828204019190066101000a81548160ff0219169083600281111561059c5761059b61184b565b5b02179055507faa03b0eb53c70f6640eba4234ad2c58782c8927e7abf7d3a6e2c45d07ca9d583843385856040516105d69493929190611c6e565b60405180910390a1600061069282600201600380602002604051908101604052809291906000905b8282101561068957838201600380602002604051908101604052809291908260038015610675576020028201916000905b82829054906101000a900460ff16600281111561064f5761064e61184b565b5b8152602001906001019060208260000104928301926001038202915080841161062f5790505b5050505050815260200190600101906105fe565b50505050610b4d565b9050600060038111156106a8576106a761184b565b5b8160038111156106bb576106ba61184b565b5b1461072c57808260010160146101000a81548160ff021916908360038111156106e7576106e661184b565b5b02179055507f132b564c6f96092065580fd28989d181dfbbfe4aa2fb7fb1eda8af68ba3073e0858260405161071d929190611cb3565b60405180910390a15050610738565b61073582610cd5565b50505b505050565b600154811115610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611ab5565b60405180910390fd5b600033905060008060008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061084c5750600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290611d28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361097b57818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8f5866c09e99941481e2be79d3a7698371543fe3ad3387b903553fd6043e855083836001600281111561095d5761095c61184b565b5b60405161096c93929190611d64565b60405180910390a15050610a6d565b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a6a57818160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8f5866c09e99941481e2be79d3a7698371543fe3ad3387b903553fd6043e85508383600280811115610a4c57610a4b61184b565b5b604051610a5b93929190611d64565b60405180910390a15050610a6d565b50505b50565b600060016002811115610a8657610a8561184b565b5b8260010160159054906101000a900460ff166002811115610aaa57610aa961184b565b5b03610adb578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610b48565b600280811115610aee57610aed61184b565b5b8260010160159054906101000a900460ff166002811115610b1257610b1161184b565b5b03610b43578160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610b48565b600090505b919050565b600080610b5983610d75565b905060016002811115610b6f57610b6e61184b565b5b816002811115610b8257610b8161184b565b5b03610b91576001915050610cd0565b600280811115610ba457610ba361184b565b5b816002811115610bb757610bb661184b565b5b03610bc6576002915050610cd0565b610bcf83610f68565b905060016002811115610be557610be461184b565b5b816002811115610bf857610bf761184b565b5b03610c07576001915050610cd0565b600280811115610c1a57610c1961184b565b5b816002811115610c2d57610c2c61184b565b5b03610c3c576002915050610cd0565b610c458361115b565b905060016002811115610c5b57610c5a61184b565b5b816002811115610c6e57610c6d61184b565b5b03610c7d576001915050610cd0565b600280811115610c9057610c8f61184b565b5b816002811115610ca357610ca261184b565b5b03610cb2576002915050610cd0565b610cbb836114cf565b15610cca576003915050610cd0565b60009150505b919050565b60016002811115610ce957610ce861184b565b5b8160010160159054906101000a900460ff166002811115610d0d57610d0c61184b565b5b03610d445760028160010160156101000a81548160ff02191690836002811115610d3a57610d3961184b565b5b0217905550610d72565b60018160010160156101000a81548160ff02191690836002811115610d6c57610d6b61184b565b5b02179055505b50565b600080600090505b60038160ff161015610f5d57828160ff1660038110610d9f57610d9e611bad565b5b6020020151600160038110610db757610db6611bad565b5b60200201516002811115610dce57610dcd61184b565b5b838260ff1660038110610de457610de3611bad565b5b6020020151600060038110610dfc57610dfb611bad565b5b60200201516002811115610e1357610e1261184b565b5b148015610ea75750828160ff1660038110610e3157610e30611bad565b5b6020020151600260038110610e4957610e48611bad565b5b60200201516002811115610e6057610e5f61184b565b5b838260ff1660038110610e7657610e75611bad565b5b6020020151600160038110610e8e57610e8d611bad565b5b60200201516002811115610ea557610ea461184b565b5b145b8015610f0a575060006002811115610ec257610ec161184b565b5b838260ff1660038110610ed857610ed7611bad565b5b6020020151600060038110610ef057610eef611bad565b5b60200201516002811115610f0757610f0661184b565b5b14155b15610f4a57828160ff1660038110610f2557610f24611bad565b5b6020020151600060038110610f3d57610f3c611bad565b5b6020020151915050610f63565b8080610f5590611d9b565b915050610d7d565b50600090505b919050565b600080600090505b60038160ff1610156111505782600160038110610f9057610f8f611bad565b5b60200201518160ff1660038110610faa57610fa9611bad565b5b60200201516002811115610fc157610fc061184b565b5b83600060038110610fd557610fd4611bad565b5b60200201518260ff1660038110610fef57610fee611bad565b5b602002015160028111156110065761100561184b565b5b14801561109a57508260026003811061102257611021611bad565b5b60200201518160ff166003811061103c5761103b611bad565b5b602002015160028111156110535761105261184b565b5b8360016003811061106757611066611bad565b5b60200201518260ff166003811061108157611080611bad565b5b602002015160028111156110985761109761184b565b5b145b80156110fd5750600060028111156110b5576110b461184b565b5b836000600381106110c9576110c8611bad565b5b60200201518260ff16600381106110e3576110e2611bad565b5b602002015160028111156110fa576110f961184b565b5b14155b1561113d578260006003811061111657611115611bad565b5b60200201518160ff16600381106111305761112f611bad565b5b6020020151915050611156565b808061114890611d9b565b915050610f70565b50600090505b919050565b60008160016003811061117157611170611bad565b5b602002015160016003811061118957611188611bad565b5b602002015160028111156111a05761119f61184b565b5b826000600381106111b4576111b3611bad565b5b60200201516000600381106111cc576111cb611bad565b5b602002015160028111156111e3576111e261184b565b5b1480156112735750816002600381106111ff576111fe611bad565b5b602002015160026003811061121757611216611bad565b5b6020020151600281111561122e5761122d61184b565b5b8260016003811061124257611241611bad565b5b602002015160016003811061125a57611259611bad565b5b602002015160028111156112715761127061184b565b5b145b80156112d457506000600281111561128e5761128d61184b565b5b826000600381106112a2576112a1611bad565b5b60200201516000600381106112ba576112b9611bad565b5b602002015160028111156112d1576112d061184b565b5b14155b1561131157816000600381106112ed576112ec611bad565b5b602002015160006003811061130557611304611bad565b5b602002015190506114ca565b8160016003811061132557611324611bad565b5b602002015160016003811061133d5761133c611bad565b5b602002015160028111156113545761135361184b565b5b8260006003811061136857611367611bad565b5b60200201516002600381106113805761137f611bad565b5b602002015160028111156113975761139661184b565b5b1480156114275750816002600381106113b3576113b2611bad565b5b60200201516000600381106113cb576113ca611bad565b5b602002015160028111156113e2576113e161184b565b5b826001600381106113f6576113f5611bad565b5b602002015160016003811061140e5761140d611bad565b5b602002015160028111156114255761142461184b565b5b145b80156114885750600060028111156114425761144161184b565b5b8260006003811061145657611455611bad565b5b602002015160026003811061146e5761146d611bad565b5b602002015160028111156114855761148461184b565b5b14155b156114c557816000600381106114a1576114a0611bad565b5b60200201516002600381106114b9576114b8611bad565b5b602002015190506114ca565b600090505b919050565b600080600090505b60038160ff1610156115845760005b60038160ff16101561157057600060028111156115065761150561184b565b5b848360ff166003811061151c5761151b611bad565b5b60200201518260ff166003811061153657611535611bad565b5b6020020151600281111561154d5761154c61184b565b5b0361155d5760009250505061158a565b808061156890611d9b565b9150506114e6565b50808061157c90611d9b565b9150506114d7565b50600190505b919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060038111156115e8576115e761184b565b5b8152602001600060028111156116015761160061184b565b5b815260200161160e611662565b81525090565b8260038101928215611651579160200282015b828111156116505782518290600361164092919061168f565b5091602001919060010190611627565b5b50905061165e9190611738565b5090565b60405180606001604052806003905b61167961175c565b8152602001906001900390816116715790505090565b826003601f016020900481019282156117275791602002820160005b838211156116f857835183826101000a81548160ff021916908360028111156116d7576116d661184b565b5b021790555092602001926001016020816000010492830192600103026116ab565b80156117255782816101000a81549060ff02191690556001016020816000010492830192600103026116f8565b505b509050611734919061177e565b5090565b5b80821115611758576000818161174f919061179b565b50600101611739565b5090565b6040518060600160405280600390602082028036833780820191505090505090565b5b8082111561179757600081600090555060010161177f565b5090565b5060009055565b600080fd5b6000819050919050565b6117ba816117a7565b81146117c557600080fd5b50565b6000813590506117d7816117b1565b92915050565b6000602082840312156117f3576117f26117a2565b5b6000611801848285016117c8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118358261180a565b9050919050565b6118458161182a565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061188b5761188a61184b565b5b50565b600081905061189c8261187a565b919050565b60006118ac8261188e565b9050919050565b6118bc816118a1565b82525050565b600381106118d3576118d261184b565b5b50565b60008190506118e4826118c2565b919050565b60006118f4826118d6565b9050919050565b611904816118e9565b82525050565b600060808201905061191f600083018761183c565b61192c602083018661183c565b61193960408301856118b3565b61194660608301846118fb565b95945050505050565b611958816117a7565b82525050565b6000602082019050611973600083018461194f565b92915050565b600080600060608486031215611992576119916117a2565b5b60006119a0868287016117c8565b93505060206119b1868287016117c8565b92505060406119c2868287016117c8565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a06826117a7565b9150611a11836117a7565b9250828201905080821115611a2957611a286119cc565b5b92915050565b6000604082019050611a44600083018561194f565b611a51602083018461183c565b9392505050565b600082825260208201905092915050565b7f4e6f20737563682067616d65206578697374732e000000000000000000000000600082015250565b6000611a9f601483611a58565b9150611aaa82611a69565b602082019050919050565b60006020820190508181036000830152611ace81611a92565b9050919050565b7f5468652067616d652068617320616c726561647920656e6465642e0000000000600082015250565b6000611b0b601b83611a58565b9150611b1682611ad5565b602082019050919050565b60006020820190508181036000830152611b3a81611afe565b9050919050565b7f4974206973206e6f7420796f7572207475726e2e000000000000000000000000600082015250565b6000611b77601483611a58565b9150611b8282611b41565b602082019050919050565b60006020820190508181036000830152611ba681611b6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546865726520697320616c72656164792061206d61726b20617420746865206760008201527f6976656e20636f6f7264696e617465732e000000000000000000000000000000602082015250565b6000611c38603183611a58565b9150611c4382611bdc565b604082019050919050565b60006020820190508181036000830152611c6781611c2b565b9050919050565b6000608082019050611c83600083018761194f565b611c90602083018661183c565b611c9d604083018561194f565b611caa606083018461194f565b95945050505050565b6000604082019050611cc8600083018561194f565b611cd560208301846118b3565b9392505050565b7f47616d6520616c726561647920737461727465642e0000000000000000000000600082015250565b6000611d12601583611a58565b9150611d1d82611cdc565b602082019050919050565b60006020820190508181036000830152611d4181611d05565b9050919050565b600060ff82169050919050565b611d5e81611d48565b82525050565b6000606082019050611d79600083018661194f565b611d86602083018561183c565b611d936040830184611d55565b949350505050565b6000611da682611d48565b915060ff8203611db957611db86119cc565b5b60018201905091905056fea264697066735822122081210605abc8d94da669de08421d94ecf26906e2e3aef0a544b22ce57e6ac76c64736f6c63430008110033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063117a5b901461005c5780637d03f5f31461008f578063caf2faaa146100ad578063cfc2f5ff146100cb578063efaa55a0146100e7575b600080fd5b610076600480360381019061007191906117dd565b610103565b604051610086949392919061190a565b60405180910390f35b61009761018d565b6040516100a4919061195e565b60405180910390f35b6100b5610343565b6040516100c2919061195e565b60405180910390f35b6100e560048036038101906100e09190611979565b610349565b005b61010160048036038101906100fc91906117dd565b61073d565b005b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060010160159054906101000a900460ff16905084565b600061019761158f565b6001816060019060028111156101b0576101af61184b565b5b908160028111156101c4576101c361184b565b5b8152505060018060008282546101da91906119fb565b9250508190555080600080600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360038111156102af576102ae61184b565b5b021790555060608201518160010160156101000a81548160ff021916908360028111156102df576102de61184b565b5b02179055506080820151816002019060036102fb929190611614565b509050507fc3e0f84839dc888c892a013d10c8f9d6dc05a21a879d0ce468ca558013e9121c60015433604051610332929190611a2f565b60405180910390a160015491505090565b60015481565b60015483111561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590611ab5565b60405180910390fd5b60008060008581526020019081526020016000209050600060038111156103b8576103b761184b565b5b8160010160149054906101000a900460ff1660038111156103dc576103db61184b565b5b1461041c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041390611b21565b60405180910390fd5b61042581610a70565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048990611b8d565b60405180910390fd5b600060028111156104a6576104a561184b565b5b8160020184600381106104bc576104bb611bad565b5b0183600381106104cf576104ce611bad565b5b602091828204019190069054906101000a900460ff1660028111156104f7576104f661184b565b5b14610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90611c4e565b60405180910390fd5b8060010160159054906101000a900460ff1681600201846003811061055f5761055e611bad565b5b01836003811061057257610571611bad565b5b602091828204019190066101000a81548160ff0219169083600281111561059c5761059b61184b565b5b02179055507faa03b0eb53c70f6640eba4234ad2c58782c8927e7abf7d3a6e2c45d07ca9d583843385856040516105d69493929190611c6e565b60405180910390a1600061069282600201600380602002604051908101604052809291906000905b8282101561068957838201600380602002604051908101604052809291908260038015610675576020028201916000905b82829054906101000a900460ff16600281111561064f5761064e61184b565b5b8152602001906001019060208260000104928301926001038202915080841161062f5790505b5050505050815260200190600101906105fe565b50505050610b4d565b9050600060038111156106a8576106a761184b565b5b8160038111156106bb576106ba61184b565b5b1461072c57808260010160146101000a81548160ff021916908360038111156106e7576106e661184b565b5b02179055507f132b564c6f96092065580fd28989d181dfbbfe4aa2fb7fb1eda8af68ba3073e0858260405161071d929190611cb3565b60405180910390a15050610738565b61073582610cd5565b50505b505050565b600154811115610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611ab5565b60405180910390fd5b600033905060008060008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061084c5750600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290611d28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361097b57818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8f5866c09e99941481e2be79d3a7698371543fe3ad3387b903553fd6043e855083836001600281111561095d5761095c61184b565b5b60405161096c93929190611d64565b60405180910390a15050610a6d565b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a6a57818160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8f5866c09e99941481e2be79d3a7698371543fe3ad3387b903553fd6043e85508383600280811115610a4c57610a4b61184b565b5b604051610a5b93929190611d64565b60405180910390a15050610a6d565b50505b50565b600060016002811115610a8657610a8561184b565b5b8260010160159054906101000a900460ff166002811115610aaa57610aa961184b565b5b03610adb578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610b48565b600280811115610aee57610aed61184b565b5b8260010160159054906101000a900460ff166002811115610b1257610b1161184b565b5b03610b43578160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610b48565b600090505b919050565b600080610b5983610d75565b905060016002811115610b6f57610b6e61184b565b5b816002811115610b8257610b8161184b565b5b03610b91576001915050610cd0565b600280811115610ba457610ba361184b565b5b816002811115610bb757610bb661184b565b5b03610bc6576002915050610cd0565b610bcf83610f68565b905060016002811115610be557610be461184b565b5b816002811115610bf857610bf761184b565b5b03610c07576001915050610cd0565b600280811115610c1a57610c1961184b565b5b816002811115610c2d57610c2c61184b565b5b03610c3c576002915050610cd0565b610c458361115b565b905060016002811115610c5b57610c5a61184b565b5b816002811115610c6e57610c6d61184b565b5b03610c7d576001915050610cd0565b600280811115610c9057610c8f61184b565b5b816002811115610ca357610ca261184b565b5b03610cb2576002915050610cd0565b610cbb836114cf565b15610cca576003915050610cd0565b60009150505b919050565b60016002811115610ce957610ce861184b565b5b8160010160159054906101000a900460ff166002811115610d0d57610d0c61184b565b5b03610d445760028160010160156101000a81548160ff02191690836002811115610d3a57610d3961184b565b5b0217905550610d72565b60018160010160156101000a81548160ff02191690836002811115610d6c57610d6b61184b565b5b02179055505b50565b600080600090505b60038160ff161015610f5d57828160ff1660038110610d9f57610d9e611bad565b5b6020020151600160038110610db757610db6611bad565b5b60200201516002811115610dce57610dcd61184b565b5b838260ff1660038110610de457610de3611bad565b5b6020020151600060038110610dfc57610dfb611bad565b5b60200201516002811115610e1357610e1261184b565b5b148015610ea75750828160ff1660038110610e3157610e30611bad565b5b6020020151600260038110610e4957610e48611bad565b5b60200201516002811115610e6057610e5f61184b565b5b838260ff1660038110610e7657610e75611bad565b5b6020020151600160038110610e8e57610e8d611bad565b5b60200201516002811115610ea557610ea461184b565b5b145b8015610f0a575060006002811115610ec257610ec161184b565b5b838260ff1660038110610ed857610ed7611bad565b5b6020020151600060038110610ef057610eef611bad565b5b60200201516002811115610f0757610f0661184b565b5b14155b15610f4a57828160ff1660038110610f2557610f24611bad565b5b6020020151600060038110610f3d57610f3c611bad565b5b6020020151915050610f63565b8080610f5590611d9b565b915050610d7d565b50600090505b919050565b600080600090505b60038160ff1610156111505782600160038110610f9057610f8f611bad565b5b60200201518160ff1660038110610faa57610fa9611bad565b5b60200201516002811115610fc157610fc061184b565b5b83600060038110610fd557610fd4611bad565b5b60200201518260ff1660038110610fef57610fee611bad565b5b602002015160028111156110065761100561184b565b5b14801561109a57508260026003811061102257611021611bad565b5b60200201518160ff166003811061103c5761103b611bad565b5b602002015160028111156110535761105261184b565b5b8360016003811061106757611066611bad565b5b60200201518260ff166003811061108157611080611bad565b5b602002015160028111156110985761109761184b565b5b145b80156110fd5750600060028111156110b5576110b461184b565b5b836000600381106110c9576110c8611bad565b5b60200201518260ff16600381106110e3576110e2611bad565b5b602002015160028111156110fa576110f961184b565b5b14155b1561113d578260006003811061111657611115611bad565b5b60200201518160ff16600381106111305761112f611bad565b5b6020020151915050611156565b808061114890611d9b565b915050610f70565b50600090505b919050565b60008160016003811061117157611170611bad565b5b602002015160016003811061118957611188611bad565b5b602002015160028111156111a05761119f61184b565b5b826000600381106111b4576111b3611bad565b5b60200201516000600381106111cc576111cb611bad565b5b602002015160028111156111e3576111e261184b565b5b1480156112735750816002600381106111ff576111fe611bad565b5b602002015160026003811061121757611216611bad565b5b6020020151600281111561122e5761122d61184b565b5b8260016003811061124257611241611bad565b5b602002015160016003811061125a57611259611bad565b5b602002015160028111156112715761127061184b565b5b145b80156112d457506000600281111561128e5761128d61184b565b5b826000600381106112a2576112a1611bad565b5b60200201516000600381106112ba576112b9611bad565b5b602002015160028111156112d1576112d061184b565b5b14155b1561131157816000600381106112ed576112ec611bad565b5b602002015160006003811061130557611304611bad565b5b602002015190506114ca565b8160016003811061132557611324611bad565b5b602002015160016003811061133d5761133c611bad565b5b602002015160028111156113545761135361184b565b5b8260006003811061136857611367611bad565b5b60200201516002600381106113805761137f611bad565b5b602002015160028111156113975761139661184b565b5b1480156114275750816002600381106113b3576113b2611bad565b5b60200201516000600381106113cb576113ca611bad565b5b602002015160028111156113e2576113e161184b565b5b826001600381106113f6576113f5611bad565b5b602002015160016003811061140e5761140d611bad565b5b602002015160028111156114255761142461184b565b5b145b80156114885750600060028111156114425761144161184b565b5b8260006003811061145657611455611bad565b5b602002015160026003811061146e5761146d611bad565b5b602002015160028111156114855761148461184b565b5b14155b156114c557816000600381106114a1576114a0611bad565b5b60200201516002600381106114b9576114b8611bad565b5b602002015190506114ca565b600090505b919050565b600080600090505b60038160ff1610156115845760005b60038160ff16101561157057600060028111156115065761150561184b565b5b848360ff166003811061151c5761151b611bad565b5b60200201518260ff166003811061153657611535611bad565b5b6020020151600281111561154d5761154c61184b565b5b0361155d5760009250505061158a565b808061156890611d9b565b9150506114e6565b50808061157c90611d9b565b9150506114d7565b50600190505b919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060038111156115e8576115e761184b565b5b8152602001600060028111156116015761160061184b565b5b815260200161160e611662565b81525090565b8260038101928215611651579160200282015b828111156116505782518290600361164092919061168f565b5091602001919060010190611627565b5b50905061165e9190611738565b5090565b60405180606001604052806003905b61167961175c565b8152602001906001900390816116715790505090565b826003601f016020900481019282156117275791602002820160005b838211156116f857835183826101000a81548160ff021916908360028111156116d7576116d661184b565b5b021790555092602001926001016020816000010492830192600103026116ab565b80156117255782816101000a81549060ff02191690556001016020816000010492830192600103026116f8565b505b509050611734919061177e565b5090565b5b80821115611758576000818161174f919061179b565b50600101611739565b5090565b6040518060600160405280600390602082028036833780820191505090505090565b5b8082111561179757600081600090555060010161177f565b5090565b5060009055565b600080fd5b6000819050919050565b6117ba816117a7565b81146117c557600080fd5b50565b6000813590506117d7816117b1565b92915050565b6000602082840312156117f3576117f26117a2565b5b6000611801848285016117c8565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118358261180a565b9050919050565b6118458161182a565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061188b5761188a61184b565b5b50565b600081905061189c8261187a565b919050565b60006118ac8261188e565b9050919050565b6118bc816118a1565b82525050565b600381106118d3576118d261184b565b5b50565b60008190506118e4826118c2565b919050565b60006118f4826118d6565b9050919050565b611904816118e9565b82525050565b600060808201905061191f600083018761183c565b61192c602083018661183c565b61193960408301856118b3565b61194660608301846118fb565b95945050505050565b611958816117a7565b82525050565b6000602082019050611973600083018461194f565b92915050565b600080600060608486031215611992576119916117a2565b5b60006119a0868287016117c8565b93505060206119b1868287016117c8565b92505060406119c2868287016117c8565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a06826117a7565b9150611a11836117a7565b9250828201905080821115611a2957611a286119cc565b5b92915050565b6000604082019050611a44600083018561194f565b611a51602083018461183c565b9392505050565b600082825260208201905092915050565b7f4e6f20737563682067616d65206578697374732e000000000000000000000000600082015250565b6000611a9f601483611a58565b9150611aaa82611a69565b602082019050919050565b60006020820190508181036000830152611ace81611a92565b9050919050565b7f5468652067616d652068617320616c726561647920656e6465642e0000000000600082015250565b6000611b0b601b83611a58565b9150611b1682611ad5565b602082019050919050565b60006020820190508181036000830152611b3a81611afe565b9050919050565b7f4974206973206e6f7420796f7572207475726e2e000000000000000000000000600082015250565b6000611b77601483611a58565b9150611b8282611b41565b602082019050919050565b60006020820190508181036000830152611ba681611b6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546865726520697320616c72656164792061206d61726b20617420746865206760008201527f6976656e20636f6f7264696e617465732e000000000000000000000000000000602082015250565b6000611c38603183611a58565b9150611c4382611bdc565b604082019050919050565b60006020820190508181036000830152611c6781611c2b565b9050919050565b6000608082019050611c83600083018761194f565b611c90602083018661183c565b611c9d604083018561194f565b611caa606083018461194f565b95945050505050565b6000604082019050611cc8600083018561194f565b611cd560208301846118b3565b9392505050565b7f47616d6520616c726561647920737461727465642e0000000000000000000000600082015250565b6000611d12601583611a58565b9150611d1d82611cdc565b602082019050919050565b60006020820190508181036000830152611d4181611d05565b9050919050565b600060ff82169050919050565b611d5e81611d48565b82525050565b6000606082019050611d79600083018661194f565b611d86602083018561183c565b611d936040830184611d55565b949350505050565b6000611da682611d48565b915060ff8203611db957611db86119cc565b5b60018201905091905056fea264697066735822122081210605abc8d94da669de08421d94ecf26906e2e3aef0a544b22ce57e6ac76c64736f6c63430008110033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameId","type":"uint256"},{"indexed":false,"internalType":"address","name":"creator","type":"address"}],"name":"GameCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameId","type":"uint256"},{"indexed":false,"internalType":"enum TicTacToe.Winners","name":"winner","type":"uint8"}],"name":"GameOver","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameId","type":"uint256"},{"indexed":false,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint8","name":"playerNumber","type":"uint8"}],"name":"PlayerJoinedGame","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"gameId","type":"uint256"},{"indexed":false,"internalType":"address","name":"player","type":"address"},{"indexed":false,"internalType":"uint256","name":"boardRow","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"boardCol","type":"uint256"}],"name":"PlayerMadeMove","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"games","outputs":[{"internalType":"address","name":"playerOne","type":"address"},{"internalType":"address","name":"playerTwo","type":"address"},{"internalType":"enum TicTacToe.Winners","name":"winner","type":"uint8"},{"internalType":"enum TicTacToe.Players","name":"playerTurn","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gameId","type":"uint256"}],"name":"joinGame","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gameId","type":"uint256"},{"internalType":"uint256","name":"_boardRow","type":"uint256"},{"internalType":"uint256","name":"_boardCol","type":"uint256"}],"name":"makeMove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"newGame","outputs":[{"internalType":"uint256","name":"gameId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"nrOfGames","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}